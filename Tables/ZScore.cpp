//
// Created by _edd.ie_ on 01/05/2025.
//

#include "ZScore.h"

ZScore::ZScore() {
    // Initialize with your values * 100
    table ={{
        {{1,1,1,1,1,1,1,1,0,0}},
        {{1,1,1,1,1,1,1,1,1,1}},
        {{2,2,2,2,2,2,2,2,2,2}},
        {{2,2,2,2,2,2,2,2,2,2}},
        {{3,3,3,3,3,3,2,2,2,2}},
        {{3,3,4,4,4,4,4,4,3,3}},
        {{5,5,5,6,6,6,6,5,5,5}},
        {{7,7,7,6,6,6,6,5,5,5}},
        {{12,11,11,10,10,9,9,8,8,8}},
        {{18,17,16,16,15,14,14,13,13,12}},
        {{25,24,23,23,22,21,20,19,19,18}},
        {{34,33,32,31,30,29,28,27,26,26}},
        {{46,45,44,42,41,40,39,37,36,35}},
        {{62,60,58,57,55,53,52,50,49,48}},
        {{82,79,77,75,73,71,69,67,65,63}},
        {{107,104,101,99,96,93,91,88,86,84}},
        {{139,135,132,128,125,122,119,116,113,110}},
        {{178,174,170,165,161,157,153,150,146,142}},
        {{227,222,216,211,206,201,197,192,187,183}},
        {{287,280,274,268,261,255,250,244,238,233}},
        {{359,351,343,336,328,321,314,307,300,293}},
        {{445,436,427,418,409,400,392,383,375,367}},
        {{548,537,526,515,505,494,484,474,464,455}},
        {{668,655,642,630,617,605,593,582,570,559}},
        {{807,792,778,763,749,735,721,707,694,681}},
        {{968,951,934,917,901,885,869,853,837,822}},
        {{1150,1131,1112,1093,1074,1056,1038,1020,1003,985}},
        {{1356,1335,1313,1292,1271,1250,1230,1210,1190,1170}},
        {{1586,1562,1538,1515,1491,1468,1445,1423,1400,1378}},
        {{1840,1814,1787,1761,1736,1711,1685,1660,1635,1610}},
        {{2118,2089,2061,2033,2005,1977,1949,1922,1894,1867}},
        {{2419,2388,2357,2327,2296,2266,2236,2206,2177,2147}},
        {{2742,2709,2676,2643,2610,2578,2546,2514,2482,2451}},
        {{3085,3050,3015,2980,2946,2911,2877,2843,2809,2776}},
        {{3446,3409,3372,3336,3299,3263,3227,3191,3156,3121}},
        {{3820,3783,3744,3707,3669,3631,3594,3557,3519,3482}},
        {{4207,4168,4129,4090,4051,4012,3974,3936,3897,3859}},
        {{4601,4562,4522,4483,4443,4404,4364,4325,4285,4246}},
        {{5000,5040,5080,5120,5160,5199,5239,5279,5319,5359}},
        {{5398,5438,5478,5517,5557,5596,5636,5675,5714,5753}},
        {{5793,5831,5870,5909,5948,5987,6026,6064,6103,6140}},
        {{6179,6217,6255,6293,6330,6368,6405,6443,6480,6517}},
        {{6554,6591,6627,6664,6700,6736,6772,6808,6843,6879}},
        {{6914,6949,6984,7019,7054,7088,7122,7156,7190,7224}},
        {{7257,7290,7323,7356,7389,7421,7453,7485,7517,7549}},
        {{7580,7611,7642,7673,7703,7733,7763,7793,7823,7852}},
        {{7881,7910,7938,7967,7995,8023,8051,8078,8105,8132}},
        {{8159,8185,8212,8238,8263,8289,8314,8339,8364,8389}},
        {{8413,8437,8461,8484,8508,8531,8554,8576,8599,8621}},
        {{8643,8665,8686,8707,8728,8749,8769,8790,8810,8829}},
        {{8849,8868,8887,8906,8925,8943,8961,8979,8997,9014}},
        {{9032,9049,9065,9082,9099,9114,9130,9146,9162,9177}},
        {{9192,9207,9222,9236,9250,9264,9278,9292,9306,9318}},
        {{9331,9344,9357,9369,9382,9394,9406,9417,9429,9440}},
        {{9452,9463,9473,9484,9495,9505,9515,9525,9535,9544}},
        {{9554,9563,9572,9581,9590,9599,9608,9616,9624,9632}},
        {{9640,9648,9656,9663,9671,9678,9685,9692,9699,9706}},
        {{9712,9719,9725,9732,9738,9744,9750,9755,9761,9767}},
        {{9772,9778,9783,9788,9793,9798,9803,9807,9812,9816}},
        {{9821,9825,9830,9834,9838,9842,9846,9850,9853,9857}},
        {{9861,9864,9867,9871,9874,9877,9880,9884,9887,9889}},
        {{9892,9895,9898,9901,9903,9906,9908,9911,9913,9915}},
        {{9918,9920,9922,9924,9926,9928,9930,9932,9934,9936}},
        {{9937,9939,9941,9943,9944,9946,9947,9949,9950,9952}},
        {{9953,9954,9956,9957,9958,9959,9960,9962,9963,9964}},
        {{9965,9966,9967,9968,9969,9970,9971,9972,9973,9974}},
        {{9974,9975,9976,9977,9978,9978,9979,9980,9981,9981}},
        {{9981,9982,9983,9983,9984,9984,9985,9985,9986,9986}},
        {{9986,9987,9987,9988,9988,9989,9989,9990,9990,9990}},
        {{9991,9992,9992,9992,9993,9993,9993,9993,9994,9994}},
        {{9994,9994,9995,9995,9995,9995,9996,9996,9996,9996}},
        {{9996,9996,9997,9997,9997,9997,9997,9997,9998,9998}},
        {{9998,9998,9998,9998,9998,9998,9998,9999,9999,9999}},
        {{9999,9999,9999,9999,9999,9999,9999,9999,9999,9999}}
    }};
}

double ZScore::getProbability(double z, double decimal) const {
    if (z < Z_MIN || z > Z_MAX || decimal < 0.0 || decimal >= 0.1) {
        return 0.0;
    }

    size_t row = static_cast<size_t>((z - Z_MIN) / Z_STEP);
    size_t col = static_cast<size_t>(decimal / 0.01);

    return table[row][col] / 10000.0;
}

// Reverse lookup: probability -> Z-score
double ZScore::getScore(double target_prob) const {
    // Multiply by 10000 to match our stored integer format
    uint16_t target = static_cast<uint16_t>(target_prob * 10000);

    // Binary search through the table
    int left = 0;
    int right = Z_ROWS - 1;

    while (left <= right) {
        int mid = (left + right) / 2;

        // Check the range of values in this row
        uint16_t min_val = *std::ranges::min_element(table[mid]);
        uint16_t max_val = *std::ranges::max_element(table[mid]);

        if (target >= min_val && target <= max_val) {
            // Found the correct row, now find the best matching column
            size_t best_col = 0;
            uint16_t closest_diff = UINT16_MAX;

            for (size_t col = 0; col < P_COLS; ++col) {
                uint16_t diff = std::abs(static_cast<int>(table[mid][col]) - static_cast<int>(target));
                if (diff < closest_diff) {
                    closest_diff = diff;
                    best_col = col;
                }
            }

            // Calculate the Z-score
            double z = Z_MIN + (mid * Z_STEP);
            double decimal = best_col * 0.01;

            return z + decimal;
        }

        if (target < min_val) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return 0.0; // Or some error indicator
}


// // Function to calculate the cumulative distribution function (CDF) for the standard normal distribution
// double normalCDF(double value) {
//     return 0.5 * erfc(-value * M_SQRT1_2);
// }
//
// // Function to generate a Z-table
// std::vector<std::vector<double>> generateZTable() {
//     std::vector<std::vector<double>> zTable(10, std::vector<double>(10));
//     for (int i = 0; i < 10; ++i) {
//         for (int j = 0; j < 10; ++j) {
//             double zValue = i * 0.1 + j * 0.01;
//             zTable[i][j] = normalCDF(zValue);
//         }
//     }
//     return zTable;
// }
//
// // Function to print the Z-table
// void printZTable(const std::vector<std::vector<double>>& zTable) {
//     std::cout << "Z-Table:\n";
//     for (const auto& row : zTable) {
//         for (double value : row) {
//             std::cout << value << " ";
//         }
//         std::cout << "\n";
//     }
// }